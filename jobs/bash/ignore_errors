@Library('pipeline-library')
import org.dsty.bash.BashClient

node() {

    def bash = new BashClient(this)

    String cmd = 'fakecommand'

    result = bash.ignoreErrors(cmd, true)

    if ( !result.stdErr.contains("${cmd}: command not found") ) {
        error('Command was found.')
    }

    if (result.stdOut) {
        error('Should not have stdOut.')
    }

    if ( result.exitCode != 127) {
        error('Exited with wrong code.')
    }

    cmd = 'secretcommand\nanothercommand'

    def result = bash.ignoreErrors(cmd, false)

    if ( !result.stdErr.contains("anothercommand") ) {
        error('Should not stop on first error.')
    }

    result = bash.ignoreErrors(cmd, false, true)

    if ( result.stdErr.contains('anothercommand') ) {
        error('Should stop on first error.')
    }

    cmd = 'exit 55'

    result = bash.ignoreErrors(cmd, false)

    if ( result.exitCode != 55 ) {
        error('Should capture the correct exitCode.')
    }

}
